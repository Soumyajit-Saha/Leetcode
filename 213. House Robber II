class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums)<3:
            return max(nums)
        
        dp1 = [0]*(len(nums)-1)
        dp1[0] = nums[0]
        dp1[1] = max(nums[0], nums[1])
        
        dp2 = [0]*(len(nums))
        dp2[1] = nums[1]
        dp2[2] = max(nums[1], nums[2])
        
        for i in range(2, len(nums)-1):
            dp1[i] = max(dp1[i-1], nums[i]+dp1[i-2])
            
        for i in range(3, len(nums)):
            dp2[i] = max(dp2[i-1], nums[i]+dp2[i-2])
            
        return max(dp1[-1], dp2[-1])
        
        
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums)<3:
            return max(nums)
        
#         dp1 = [0]*(len(nums)-1)
#         dp1[0] = nums[0]
#         dp1[1] = max(nums[0], nums[1])
        
#         dp2 = [0]*(len(nums))
#         dp2[1] = nums[1]
#         dp2[2] = max(nums[1], nums[2])
        
        prev2 = nums[0] #prev -2
        prev1 = max(nums[0], nums[1]) #prev -1
        
        for i in range(2, len(nums)-1): # for traversing from 0 to n-1, to not consider last element
            ans1 = max(prev1, nums[i]+ prev2)
            prev2 = prev1
            prev1 = ans1
        ans1 = prev1
        
        prev2 = nums[1] #prev -2
        prev1 = max(nums[2], nums[1]) #prev -1    
        for i in range(3, len(nums)): # for traversing from 1 to n, to not consider 1st element
            ans2 = max(prev1, nums[i]+ prev2)
            prev2 = prev1
            prev1 = ans2
        ans2 = prev1   
        return max(ans1, ans2)
